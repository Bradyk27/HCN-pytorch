/home/hpc-0235/.local/lib/python3.7/site-packages/visdom/server.py:39: DeprecationWarning: zmq.eventloop.ioloop is deprecated in pyzmq 17. pyzmq now works with default tornado and asyncio eventloops.
  ioloop.install()  # Needs to happen before any tornado imports!
INFO:root:Application Started
2021-06-23 13:26:11,468:WARNING: Setting up a new session...
INFO:tornado.access:200 POST /env/main (127.0.0.1) 1.33ms
INFO:tornado.access:101 GET /vis_socket (127.0.0.1) 0.89ms
INFO:root:Opened visdom socket from ip: 127.0.0.1
2021-06-23 13:26:11,495:INFO: Visdom successfully connected to server
2021-06-23 13:26:11,591:WARNING: Setting up a new session...
INFO:tornado.access:200 POST /env/main (127.0.0.1) 1.16ms
INFO:tornado.access:101 GET /vis_socket (127.0.0.1) 0.80ms
INFO:root:Opened visdom socket from ip: 127.0.0.1
2021-06-23 13:26:11,607:INFO: Visdom successfully connected to server
2021-06-23 13:26:11,703:WARNING: Setting up a new session...
INFO:tornado.access:200 POST /env/main (127.0.0.1) 18.96ms
INFO:tornado.access:101 GET /vis_socket (127.0.0.1) 0.72ms
INFO:root:Opened visdom socket from ip: 127.0.0.1
2021-06-23 13:26:11,734:INFO: Visdom successfully connected to server
2021-06-23 13:26:11,831:WARNING: Setting up a new session...
INFO:tornado.access:200 POST /env/main (127.0.0.1) 1.12ms
INFO:tornado.access:101 GET /vis_socket (127.0.0.1) 0.81ms
INFO:root:Opened visdom socket from ip: 127.0.0.1
2021-06-23 13:26:11,846:INFO: Visdom successfully connected to server
2021-06-23 13:26:11,942:WARNING: Setting up a new session...
INFO:tornado.access:200 POST /env/main (127.0.0.1) 1.04ms
INFO:tornado.access:101 GET /vis_socket (127.0.0.1) 0.81ms
INFO:root:Opened visdom socket from ip: 127.0.0.1
2021-06-23 13:26:11,957:INFO: Visdom successfully connected to server
2021-06-23 13:26:12,053:INFO: dataset_dir: lidar_mocap_convert/
2021-06-23 13:26:12,053:INFO: dataset_name: lidar_mocap
2021-06-23 13:26:12,053:INFO: model_dir: ./
2021-06-23 13:26:12,053:INFO: model_name: HCN
2021-06-23 13:26:12,053:INFO: load_model: None
2021-06-23 13:26:12,053:INFO: load: False
2021-06-23 13:26:12,053:INFO: mode: train
2021-06-23 13:26:12,054:INFO: num: 01
2021-06-23 13:26:12,054:INFO: model_version: HCN
2021-06-23 13:26:12,054:INFO: experiment_path: ./experiments/lidar_mocap/HCN01
2021-06-23 13:26:12,054:INFO: restore_file: None
2021-06-23 13:26:12,054:INFO: gpu_id: 0
2021-06-23 13:26:12,054:INFO: cuda: True
2021-06-23 13:26:12,054:INFO: data_parallel: False
2021-06-23 13:26:12,054:INFO: seed: 0
2021-06-23 13:26:12,054:INFO: lr: 0.001
2021-06-23 13:26:12,054:INFO: lr_decay_type: exp
2021-06-23 13:26:12,055:INFO: lr_step: [100, 160, 200]
2021-06-23 13:26:12,055:INFO: scheduler_gamma: 0.1
2021-06-23 13:26:12,055:INFO: scheduler_gamma2: 0.99
2021-06-23 13:26:12,055:INFO: scheduler_gamma3: 0.5
2021-06-23 13:26:12,055:INFO: patience: 20
2021-06-23 13:26:12,055:INFO: batch_size: 64
2021-06-23 13:26:12,055:INFO: num_epochs: 400
2021-06-23 13:26:12,055:INFO: start_epoch: 0
2021-06-23 13:26:12,055:INFO: save_best_ever_n_epoch: 50
2021-06-23 13:26:12,055:INFO: save_summary_steps: 1
2021-06-23 13:26:12,056:INFO: num_workers: 4
2021-06-23 13:26:12,056:INFO: optimizer: Adam
2021-06-23 13:26:12,056:INFO: weight_decay: 0.0001
2021-06-23 13:26:12,056:INFO: clip: 0.5
2021-06-23 13:26:12,056:INFO: train_feeder_args: {'data_path': None, 'label_path': None, 'random_valid_choose': False, 'random_shift': False, 'random_move': False, 'window_size': 32, 'normalization': False, 'debug': False, 'origin_transfer': 0, 'crop_resize': True, 'p_interval': [0.5, 1]}
2021-06-23 13:26:12,056:INFO: test_feeder_args: {'data_path': None, 'label_path': None, 'random_valid_choose': False, 'random_shift': False, 'random_move': False, 'window_size': 32, 'normalization': False, 'debug': False, 'origin_transfer': 0, 'crop_resize': True, 'p_interval': [0.95]}
2021-06-23 13:26:12,056:INFO: model_args: {'in_channel': 3, 'out_channel': 64, 'window_size': 32, 'num_joint': 13, 'num_person': 1, 'num_class': 10}
2021-06-23 13:26:12,056:INFO: loss_args: {'type': 'CE'}
2021-06-23 13:26:12,056:INFO: dataset_dir: lidar_mocap_convert/
2021-06-23 13:26:12,057:INFO: dataset_name: lidar_mocap
2021-06-23 13:26:12,057:INFO: mode: train
2021-06-23 13:26:22,793:INFO: HCN(
  (conv1): Sequential(
    (0): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    (1): ReLU()
  )
  (conv2): Conv2d(64, 32, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0))
  (conv3): Sequential(
    (0): Conv2d(13, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (conv4): Sequential(
    (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Dropout2d(p=0.5, inplace=False)
    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (conv1m): Sequential(
    (0): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    (1): ReLU()
  )
  (conv2m): Conv2d(64, 32, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0))
  (conv3m): Sequential(
    (0): Conv2d(13, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (conv4m): Sequential(
    (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Dropout2d(p=0.5, inplace=False)
    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (conv5): Sequential(
    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU()
    (2): Dropout2d(p=0.5, inplace=False)
    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (conv6): Sequential(
    (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU()
    (2): Dropout2d(p=0.5, inplace=False)
    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (fc7): Sequential(
    (0): Linear(in_features=1024, out_features=512, bias=True)
    (1): ReLU()
    (2): Dropout2d(p=0.5, inplace=False)
  )
  (fc8): Linear(in_features=512, out_features=10, bias=True)
)
2021-06-23 13:26:22,795:INFO: Loading the datasets...
2021-06-23 13:26:22,816:INFO: - done.
2021-06-23 13:26:22,816:INFO: Starting training for 400 epoch(s)
2021-06-23 13:26:22,816:INFO: lr decay:exp
/opt/conda/lib/python3.7/site-packages/torch/optim/lr_scheduler.py:136: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
2021-06-23 13:26:22,819:INFO: Epoch 1/400
  0%|          | 0/1 [00:00<?, ?it/s]weight initial finished!
/opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:2952: UserWarning: nn.functional.upsample is deprecated. Use nn.functional.interpolate instead.
  warnings.warn("nn.functional.upsample is deprecated. Use nn.functional.interpolate instead.")
  0%|          | 0/1 [00:02<?, ?it/s, loss_running=6.564]100%|██████████| 1/1 [00:02<00:00,  2.02s/it, loss_running=6.564]/opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:2952: UserWarning: nn.functional.upsample is deprecated. Use nn.functional.interpolate instead.
  warnings.warn("nn.functional.upsample is deprecated. Use nn.functional.interpolate instead.")
100%|██████████| 1/1 [00:02<00:00,  2.22s/it, loss_running=6.564]
2021-06-23 13:26:25,045:INFO: - Train metrics: accuracytop1: 0.050 ; accuracytop5: 0.450 ; loss: 6.564 ; ls_all: 6.564 ; ls_CE: 6.564
[tensor([[[[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.9695,  3.2743],
          [ 0.8901,  3.1208]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         ...,

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  1.9608]],

         [[ 0.0000,  0.0000],
          [ 0.2369,  0.0000]]],


        [[[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.2561],
          [ 0.1584,  0.2253]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         ...,

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.1378,  0.0246],
          [ 0.0000,  0.0134]]],


        [[[ 0.3866,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.1572,  0.2397],
          [ 0.0000,  0.1513]],

         [[ 1.2421,  0.3232],
          [ 0.8923,  0.0000]],

         ...,

         [[ 1.7979,  0.0144],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.9564]],

         [[ 1.5037,  0.1725],
          [ 1.8174,  1.9516]]],


        ...,


        [[[ 0.8972,  1.0528],
          [ 3.1745,  6.1471]],

         [[ 2.7710,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         ...,

         [[ 4.9356,  3.7345],
          [ 9.2772,  7.3509]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]]],


        [[[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[10.6267, 10.6148],
          [ 3.9955,  3.5654]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         ...,

         [[ 0.2944,  0.0000],
          [ 0.1945,  0.0000]],

         [[ 7.7716,  5.3122],
          [ 1.1617,  1.1436]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]]],


        [[[ 5.5246,  4.8863],
          [ 5.3689,  4.4754]],

         [[ 0.0000,  0.9361],
          [ 0.3499,  1.7486]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         ...,

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.0000],
          [ 0.1120,  0.1581]],

         [[ 2.2008,  0.0000],
          [ 2.4142,  0.0000]]]], device='cuda:0',
       grad_fn=<MaxPool2DWithIndicesBackward>), tensor([[[[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         ...,

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]]],


        [[[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         ...,

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]]],


        [[[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         ...,

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]]],


        ...,


        [[[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         ...,

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]]],


        [[[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         ...,

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]]],


        [[[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         ...,

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]]]], device='cuda:0')]
tensor([[[[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.9695,  3.2743],
          [ 0.8901,  3.1208]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         ...,

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  1.9608]],

         [[ 0.0000,  0.0000],
          [ 0.2369,  0.0000]]],


        [[[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.2561],
          [ 0.1584,  0.2253]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         ...,

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.1378,  0.0246],
          [ 0.0000,  0.0134]]],


        [[[ 0.3866,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.1572,  0.2397],
          [ 0.0000,  0.1513]],

         [[ 1.2421,  0.3232],
          [ 0.8923,  0.0000]],

         ...,

         [[ 1.7979,  0.0144],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.9564]],

         [[ 1.5037,  0.1725],
          [ 1.8174,  1.9516]]],


        ...,


        [[[ 0.8972,  1.0528],
          [ 3.1745,  6.1471]],

         [[ 2.7710,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         ...,

         [[ 4.9356,  3.7345],
          [ 9.2772,  7.3509]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]]],


        [[[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[10.6267, 10.6148],
          [ 3.9955,  3.5654]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         ...,

         [[ 0.2944,  0.0000],
          [ 0.1945,  0.0000]],

         [[ 7.7716,  5.3122],
          [ 1.1617,  1.1436]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]]],


        [[[ 5.5246,  4.8863],
          [ 5.3689,  4.4754]],

         [[ 0.0000,  0.9361],
          [ 0.3499,  1.7486]],

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         ...,

         [[ 0.0000,  0.0000],
          [ 0.0000,  0.0000]],

         [[ 0.0000,  0.0000],
          [ 0.1120,  0.1581]],

         [[ 2.2008,  0.0000],
          [ 2.4142,  0.0000]]]], device='cuda:0',
       grad_fn=<MaxPool2DWithIndicesBackward>)
tensor([[[[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         ...,

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]]],


        [[[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         ...,

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]]],


        [[[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         ...,

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]]],


        ...,


        [[[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         ...,

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]]],


        [[[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         ...,

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]]],


        [[[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         ...,

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]],

         [[0., 0.],
          [0., 0.]]]], device='cuda:0')
Traceback (most recent call last):
  File "main.py", line 525, in <module>
    args.model_dir,logger, params.restore_file)
  File "main.py", line 325, in train_and_evaluate
    val_metrics,val_confusion_meter = evaluate(model, loss_fn, val_dataloader, metrics, params,logger)
  File "main.py", line 198, in evaluate
    metrics_mean = {metric:np.mean([x[metric] if type(x[metric])==float else x[metric][0].cpu().item() for x in summ]) for metric in summ[0]}
IndexError: list index out of range
